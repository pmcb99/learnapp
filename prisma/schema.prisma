generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model UserApiLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
}

model UserSubject {
  userId  String
  subject UserSubject_subject
  enabled Boolean
  level   Level
  user    User                @relation(fields: [userId], references: [id])

  @@id([userId, subject])
  @@index([userId])
  @@index([subject])
}

model User {
  id        String        @id @default(cuid())
  email     String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  subjects  UserSubject[]
}

model Definition {
  id         String             @id @default(cuid())
  term       String
  definition String
  keyword    String
  subject    Definition_subject
  topic      String
}

model ExamPaper {
  id        String            @id
  subject   ExamPaper_subject
  year      Int
  paperName String
  fileUrl   String
  createdAt DateTime          @default(now())
  updatedAt DateTime
}

model PaperQuestionsByTopic {
  id                Int     @id @default(autoincrement())
  level             String? @db.VarChar(255)
  examType          String? @db.VarChar(255)
  year              Int?
  question          String? @db.VarChar(255)
  parts             String? @db.VarChar(255)
  topic             String? @db.VarChar(255)
  subject           String? @db.VarChar(255)
  paperVersion      String  @db.VarChar(255)
  examPaperPage     Int?
  markingSchemePage Int?
}

model QuestionsByPage {
  id           Int     @id @default(autoincrement())
  year         Int?
  page         Int?
  question     Int?
  level        String? @db.VarChar(255)
  examType     String? @db.VarChar(255)
  subject      String? @db.VarChar(255)
  paperType    String? @db.VarChar(255)
  paperVersion String? @db.VarChar(255)
}

enum Level {
  HIGHER
  ORDINARY
}

enum ExamPaper_subject {
  ENGLISH
  IRISH
  MATHEMATICS
  FRENCH
  GERMAN
  SPANISH
  ITALIAN
  RUSSIAN
  JAPANESE
  PHYSICS
  CHEMISTRY
  BIOLOGY
  AGRICULTURAL_SCIENCE
  APPLIED_MATHEMATICS
  PHYSICS_AND_CHEMISTRY
  ACCOUNTING
  BUSINESS
  ECONOMICS
  GEOGRAPHY
  HISTORY
  CLASSICAL_STUDIES
  CONSTRUCTION_STUDIES
  ENGINEERING
  DESIGN_AND_COMMUNICATION_GRAPHICS
  HOME_ECONOMICS
  ART
  MUSIC
  RELIGIOUS_EDUCATION
}

enum UserSubject_subject {
  ENGLISH
  IRISH
  MATHEMATICS
  FRENCH
  GERMAN
  SPANISH
  ITALIAN
  RUSSIAN
  JAPANESE
  PHYSICS
  CHEMISTRY
  BIOLOGY
  AGRICULTURAL_SCIENCE
  APPLIED_MATHEMATICS
  PHYSICS_AND_CHEMISTRY
  ACCOUNTING
  BUSINESS
  ECONOMICS
  GEOGRAPHY
  HISTORY
  CLASSICAL_STUDIES
  CONSTRUCTION_STUDIES
  ENGINEERING
  DESIGN_AND_COMMUNICATION_GRAPHICS
  HOME_ECONOMICS
  ART
  MUSIC
  RELIGIOUS_EDUCATION
}

enum Definition_subject {
  ENGLISH
  IRISH
  MATHEMATICS
  FRENCH
  GERMAN
  SPANISH
  ITALIAN
  RUSSIAN
  JAPANESE
  PHYSICS
  CHEMISTRY
  BIOLOGY
  AGRICULTURAL_SCIENCE
  APPLIED_MATHEMATICS
  PHYSICS_AND_CHEMISTRY
  ACCOUNTING
  BUSINESS
  ECONOMICS
  GEOGRAPHY
  HISTORY
  CLASSICAL_STUDIES
  CONSTRUCTION_STUDIES
  ENGINEERING
  DESIGN_AND_COMMUNICATION_GRAPHICS
  HOME_ECONOMICS
  ART
  MUSIC
  RELIGIOUS_EDUCATION
}
